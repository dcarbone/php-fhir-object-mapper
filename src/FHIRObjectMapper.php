<?php namespace FHIR\ObjectMapper;

use FHIR\Utilities\ReflectionUtils;
use phpDocumentor\Reflection\DocBlock;
use Symfony\Component\Finder\Finder;

/**
 * Class FHIRObjectMapper
 * @package FHIR\ObjectMapper
 */
class FHIRObjectMapper
{
    /** @var string */
    protected $elementClassDir;
    /** @var string */
    protected $resourceClassDir;
    /** @var string */
    protected $outputDir;

    /** @var string */
    protected $outputClassName = 'FHIRObjectClassPropertyMap';

    /** @var string */
    protected $elementClassNamespace = '\\FHIR\\Elements\\';
    /** @var string */
    protected $resourceClassNamespace = '\\FHIR\\Resources\\';

    /** @var Finder */
    protected $elementClassFinder;
    /** @var Finder */
    protected $resourceClassFinder;

    /** @var array */
    protected $classNamespaceMap = array();

    /**
     * Constructor
     *
     * TODO: There must be a better way to do this...
     *
     * @param string $elementClassDir Path to FHIRElements directory
     * @param string $resourceClassDir Path to FHIRResources directory
     * @param string $outputDir Path to place generated output
     */
    public function __construct($elementClassDir, $resourceClassDir, $outputDir)
    {
        $this->elementClassDir = $elementClassDir;
        $this->resourceClassDir = $resourceClassDir;

        if (!is_dir($outputDir) && !@mkdir($outputDir))
            throw new \RuntimeException('Could not create FHIR Object Mapper output dir at location "'.$outputDir.'", please check permissions.');

        $outputDir = rtrim($outputDir, "\\/").DIRECTORY_SEPARATOR;

        $this->outputDir = $outputDir;

        $finder = new Finder();
        $this->elementClassFinder = $finder
            ->files()
            ->in($elementClassDir)
            ->ignoreDotFiles(true)
            ->ignoreVCS(true)
            ->name('*.php');

        $finder = new Finder();
        $this->resourceClassFinder = $finder
            ->files()
            ->in($resourceClassDir)
            ->ignoreDotFiles(true)
            ->ignoreVCS(true)
            ->name('*.php');

        foreach($this->elementClassFinder as $classFile)
        {
            /** @var \Symfony\Component\Finder\SplFileInfo $classFile */
            $className = str_replace('.php', '', $classFile->getFilename());
            $this->classNamespaceMap[$className] = $this->elementClassNamespace.$className;
        }

        foreach($this->resourceClassFinder as $classFile)
        {
            /** @var \Symfony\Component\Finder\SplFileInfo $classFile */
            $className = str_replace('.php', '', $classFile->getFilename());
            $this->classNamespaceMap[$className] = $this->resourceClassNamespace.$className;
        }
    }

    /**
     * Create property -> class(es) map for FHIR classes
     *
     * TODO: Clean this method up a bit.
     */
    public function generatePropertyMapClass()
    {
        $classMap = array();

        foreach($this->elementClassFinder as $classFile)
        {
            /** @var \Symfony\Component\Finder\SplFileInfo $classFile */
            $className = str_replace(array('\\', 'src/', '/', '.php'), array('/', '', '\\', ''), $classFile->getRelativePathname());

            if (false !== strpos($className, 'Abstract') || false !== strpos($className, 'Interface'))
                continue;

            $namespacedClassName = $this->elementClassNamespace.$className;
            $reflectionClass = new \ReflectionClass($namespacedClassName);
            $classMap[$namespacedClassName] = $this->createMapEntry($reflectionClass);
        }

        foreach($this->resourceClassFinder as $classFile)
        {
            /** @var \Symfony\Component\Finder\SplFileInfo $classFile */
            $className = str_replace(array('\\', 'src/', '/', '.php'), array('/', '', '\\', ''), $classFile->getRelativePathname());

            if (false !== strpos($className, 'Abstract') || false !== strpos($className, 'Interface'))
                continue;

            $namespacedClassName = $this->resourceClassNamespace.$className;
            $reflectionClass = new \ReflectionClass($namespacedClassName);
            $classMap[$namespacedClassName] = $this->createMapEntry($reflectionClass);
        }

        $outputFile = $this->outputDir.$this->outputClassName.'.php';

        $data = str_replace("\n  ", "\n        ", var_export($classMap, true));
        $now = date('Y-m-d e');
        $outputString = <<<PHP
<?php

/**
 * This class is automatically generated by php-fhir-object-mapper, do not edit!
 *
 * Created: {$now}
 */
class {$this->outputClassName} implements \\ArrayAccess {

    /** @var array */
    private \$_classMap = {$data};

    public function offsetSet(\$offset, \$value) {
        throw new \\BadMethodCallException('You may not add objects to this map post-creation.');
    }

    public function offsetExists(\$offset) {
        return isset(\$this->_classMap[\$offset]);
    }

    public function offsetUnset(\$offset) {
        throw new \\BadMethodCallException('You may not remove objects from this map post-creation.');
    }

    public function offsetGet(\$offset) {
        if (isset(\$this->_classMap[\$offset]))
            return \$this->_classMap[\$offset];

        throw new \OutOfRangeException('No FHIR class named "'.\$offset.'" exists in this map.');
    }
}
PHP;
        return (bool)file_put_contents($outputFile, $outputString);
    }

    /**
     * @param \ReflectionClass $reflectionClass
     * @return array
     */
    protected function createMapEntry(\ReflectionClass $reflectionClass)
    {
        // Used in closure below
        $_classNamespaceMap = &$this->classNamespaceMap;

        $map = array();

        foreach($reflectionClass->getProperties() as $property)
        {
            $scalarTypes = array('string', 'bool', 'boolean', 'int', 'integer', 'float', 'double', 'mixed', 'null');
            $propertyName = $property->getName();
            $propertyClasses = ReflectionUtils::getClassesFromPropertyDocBlock($property, true);

            $map[$propertyName] = array_filter(array_map(function($class) use ($_classNamespaceMap, $scalarTypes) {
                if (false !== strpos($class, 'Collection'))
                    return null;

                $isCollection = false;

                if (false !== strpos($class, '\\'))
                {
                    $exp = explode('\\', $class);
                    $class = end($exp);
                }
                if (false !== strpos($class, '[]'))
                {
                    $class = str_replace('[]', '', $class);
                    $isCollection = true;
                }

                if (!in_array($class, $scalarTypes))
                {
                    if (isset($_classNamespaceMap[$class]))
                        $class = $_classNamespaceMap[$class];
                    else
                        throw new \RuntimeException('Could not locate full namespace for class "'.$class.'".');
                }

                if ($isCollection)
                    return array($class);

                return $class;
            }, $propertyClasses));
        }

        return $map;
    }
}